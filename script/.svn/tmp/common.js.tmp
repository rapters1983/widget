/* =============================================
 * v20141018.1
 * =============================================
 * Copyright 章晓健、谢武
 *
 * 公共方法、配置地址
 * ============================================= */

var BASE_URL = 'http://m.zhanqi.tv/';

// ajax地址配置
// var URLConfig = {
//   'gameIndex': BASE_URL + 'api/static/game.index/index.json'
// , 'liveIndex': BASE_URL + 'api/static/live.index/index.json'
// , 'gameList': BASE_URL + 'api/static/game.lives/6/1-4.json'
// }
function URLConfig(which, data) {
  switch (which) {
    case 'hotLive':
      return BASE_URL + '/api/static/game.lives/'+data['id']+'/'+data['start']+'-'+data['count']+'.json';
    case 'gameLiveIndex':
      return BASE_URL + '/api/static/game.lives/'+data['id']+'/'+data['num']+'-'+data['page']+'.json';
    case 'otherLiveIndex':
      return BASE_URL + '/api/static/live.others/4-1-10,13,6.json';
    case 'liveIndex':
      return BASE_URL + 'api/static/live.index/index.json';
    case 'liveList':
      return BASE_URL + '/api/static/live.hots/'+data['num']+'-'+data['page']+'.json';
    case 'gameList':
      return BASE_URL + 'api/static/game.lists/'+data['num']+'-'+data['page']+'.json';
    case 'liveList':
      return BASE_URL + 'api/static/game.lives/'+data['id']+'/'+data['num']+'-'+data['page']+'.json';
    case 'liveRoomInfo':  // 获取直播播放信息
      return BASE_URL + 'api/static/live.roomid/'+data['roomid']+'.json';
    case 'videoRoomInfo': // 获取视频播放信息
      return BASE_URL + 'api/static/video.videoid/'+data['roomid']+'.json';
    case 'login':
      return BASE_URL + 'api/auth/user.login';
    case 'register':
      return BASE_URL + 'api/auth/user.register';
    case 'logout':
      return BASE_URL + 'api/auth/user.logout';
    case 'bindPhone':
      return BASE_URL + '/api/user/user.bind_mobile';
    case 'nickname':
<<<<<<< .mine
      return  BASE_URL + '/api/public/validate.nickname';
    case 'editInfo': 
      return  BASE_URL + '/api/user/user.edit';
    case 'avatar': 
      return  BASE_URL + '/api/user/upload.avatar';
    case 'charge': 
      return  BASE_URL + '/api/user/log.charge?'+data['stime']+'-'+data['etime']+'-'+data['nums']+'-'+data['start']+'.json';
    case 'giftuse': 
      return  BASE_URL + '/api/user/log.giftuse?'+data['stime']+'-'+data['etime']+'-'+data['nums']+'-'+data['start']+'.json';
    case 'getGiftList':
      return BASE_URL + '/api/static/live.gifts/'+data['roomid']+'.json'
	}
}
=======
      return BASE_URL + '/api/public/validate.nickname';
    case 'editInfo':
      return BASE_URL + '/api/user/user.edit';
    case 'avatar':
      return BASE_URL + '/api/user/upload.avatar';
    case 'charge':
      return BASE_URL + '/api/user/log.charge?'+data['stime']+'-'+data['etime']+'-'+data['nums']+'-'+data['start']+'.json';
    case 'giftuse':
      return BASE_URL + '/api/user/log.giftuse?'+data['stime']+'-'+data['etime']+'-'+data['nums']+'-'+data['start']+'.json';
  }
};
>>>>>>> .r132

// 取url参数，不推荐使用
function getParam(B, E) {
  var params = null;
  if (typeof E == 'undefined') {
    E = null
  }
  if (null == params) {
    params = [];
    if (location.search.length > 0) {
      var C = decodeURIComponent(location.search).substr(1).split('&');
      for (var D = 0; D < C.length; ++D) {
        var A = C[D].split('=');
        params[A[0]] = A[1]
      }
    }
  }
  return (typeof params[B] == 'undefined') ? E : params[B]
};

/* 框架初始化 */
+function(win, $) {
  var yp = {};
  /* 语法糖扩展 */
  // 对象扩展
  yp.mix = $.extend;
  // 对象循环
  yp.each = function(arr, callback) {
    return $.each(arr, function(a, b) {
      return callback(b, a);
    });
  };
  // 格式化
  yp.format = function(str, data) {
    if (!str) {
      throw new Error('yp.format字符串参数不能为空');
      return '';
    }
    var re = this.re || /\${([\s\S]+?)}/g
    if (typeof data !== 'object') data = [].slice.call(arguments, 1);
    return str.replace(re, function($0, $1) {
      return data[$1] != null ? data[$1] : '';
    });
  };
  // 获取随机数
  yp.getRandom = function(min, max) {
    return Math.round(Math.random() * (max - min) + min);
  };
  // 获取url参数
  yp.query = function(key, context) {
    var result
    var regParam = new RegExp('([\?\&])' + key + '=([^\&]*)(\&?)', 'i')
    context = context || location.search;
    return (result = regParam.exec(context)) ? result[2] : null;
  };
  // 空函数
  yp.noop = $.noop;

  yp.mix(yp, {
    global: {}  /*全局变量*/
  , config: {}  /*全局配置*/
  , loader: {}  /*资源加载*/
  , loger: {}   /*日志输出*/
  , mods: {}    /*全局模块*/
  , cache: {}   /*全局缓存*/
  , event: {}   /*全局事件*/
  , ui: {}      /*全局UI*/
  , system: {}  /*系统函数*/
  });

  win.yp = yp;
}(window, $);

/* 全局事件管理event */
+function($, yp) {
var 
  exports = yp
, api = exports.event
, o = $({})
  
  api.sub = function() {
    var eventName = arguments[0]
    var data = o.data(eventName.replace(/\..*/, ''))
    if (data) {
      var callback = arguments[1]
      callback(data);
      return;
    }
    o.on.apply(o, arguments);
  };
  api.unsub = function() {
    o.off.apply(o, arguments);
  };
  api.pub = function() {
    o.trigger.apply(o, arguments);
    var eventName = arguments[0]
    return {
      cache: function(val) {
        eventName = typeof eventName === 'string' ? eventName : eventName.type + '.' + eventName.namespace;
        o.data(eventName, val || true);
      }
    }
  };

  // 系统观察者
  exports.sub = $.sub = api.sub;
  exports.unsub = $.unsub = api.unsub;
  exports.pub = $.pub = api.pub;
}($, yp);